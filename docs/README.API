API FUNCTIONS

	int MPSSE(enum modes mode, int freq, int endianess)

		Auto detects, opens and initializes the first FTDI device for the specified mode.
	 
		@mode      - Mode to open the device in. One of: SPI0, SPI1, SPI2, SPI3, I2C.
		@freq      - Clock frequency to use for the specified mode.
		@endianess - Specifies how data is clocked in/out (MSB, LSB).

		Returns MPSSE_OK on success.
		Returns MPSSE_FAIL on failure.


	int Open(int vid, int pid, int interface, enum modes mode, int freq, int endianess)

		Like MPSSE(), but opens the device matching the given vendor and product ID. 
		Called internally by MPSSE().

		@vid       - Device vendor ID.
		@pid       - Device product ID.
		@interface - FTDI interface to use, one of: IFACE_ANY, IFACE_A - IFACE_D
		@mode      - MPSSE mode, one of: SPI0, SPI1, SPI2, SPI3, I2C.
		@freq      - Clock frequency to use for the specified mode.
		@endianess - SPecifies how data is clocked in/out (MSB, LSB).

		Returns MPSSE_OK on success.
		Returns MPSSE_FAIL on failure.


	void Close(void)
	 
		Closes the FTDI device and deinitializes libftdi.

		Returns void.


	int Start(void)

                Send the start condition for the selected protocol.

                Returns MPSSE_OK on success.
                Returns MPSSE_FAIL on failure.


	int Stop(void)

                Send the data stop condition for the selected serial protocol.

                Returns MPSSE_OK on success.
                Returns MPSSE_FAIL on failure.


	char *Read(int size)

                Reads data over the selected serial protocol.

                @size  - Number of bytes to read.

                Returns a pointer to the read data on success.
                Returns NULL on failure.


        int Write(char *data, int size)

                Send data out via the selected serial protocol.
                Note that in Python the size field is not used.

                @data - Buffer of data to send.
                @size - Size of data (C only).

                Returns MPSSE_OK on success.
                Returns MPSSE_FAIL on failure.


	int GetAck(void)

		Return the status of the last received acknolwedgement bit (I2C only).

		Returns 0 if an ACK was received.
		Returns 1 if a NACK was received.


	void SetAck(int ack)

		Set the ACK bit to send when Read() receives a byte from the I2C slave device (I2C only).

		@ack - Set to 0 to send ACKs (default).
		       Set to 1 to send NACKs.

		Returns void.


	char *ErrorString(void)

                Returns the last error string as reported by libftdi. This data should not be freed by the caller.


	int GetVid(void)

		Returns the USB vendor ID of the connected FTDI device.


	int GetPid(void)

		Returns the USB product ID of the connected FTDI device.


	char *GetDescription(void)

		Returns the description, as listed in the internal supported_devices structure, of the connected FTDI device.
		The caller must not free the return value.

	
	int GetClock(void)

		Gets the currently configured clock frequency.

		Returns an unsigned 32 bit value representing the clock frequency.


	int SetClock(int freq)

                Sets the appropriate divisor for the desired clock frequency.
		Called internally by Open().

                @freq - Desired clock frequency in hertz.

                Returns MPSSE_OK on success.
                Returns MPSSE_FAIL on failure.


	int SetMode(enum modes mode, int endianess)

                Sets the appropriate transmit and receive commands based on the requested mode and byte order.
                Called internally by Open().

                @mode      - The desired mode, as listed in enum modes.
                @endianess - Most or least significant byte first (MSB / LSB).

                Returns MPSSE_OK on success.
                Returns MPSSE_FAIL on failure.


	int SetLoopback(int enable)

		Enable / disable internal loopback.
		Called internally by SetMode().
	 
		@enable - Zero to disable the FTDI internal loopback, 1 to enable loopback.

		Returns MPSSE_OK on success.
		Returns MPSSE_FAIL on failure.


	void SetCSIdle(int idle)

		Set the idle state of the chip select pin. CS idles high by default.

		@idle - Set to 1 to idle high, 0 to idle low.

		Returns void.


	int PinHigh(int pin)

		Set the specified GPIO pin high (1).
		Note that the state of GPIO pins 0-3 can only be changed prior to a Start()
		or after a Stop() condition is sent. 

		@pin - Pin number, one of: 0 - 11.

		Returns MPSSE_OK on success.
		Returns MPSSE_FAIL on failure.


	int PinLow(int pin)

		Set the specified GPIO pin low (0).
		Note that the state of GPIO pins 0-3 can only be changed prior to a Start()
		or after a Stop() condition is sent. 

		@pin - Pin number, one of: 0 - 11.

		Returns MPSSE_OK on success.
		Returns MPSSE_FAIL on failure.
