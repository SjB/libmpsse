API FUNCTIONS

	int MPSSE(enum modes mode, int freq, int endianess)

		Auto detects, opens and initializes the first FTDI device for the specified mode.
	 
		@mode      - Mode to open the device in. One of: SPI0, SPI1, SPI2, SPI3, I2C.
		@freq      - Clock frequency to use for the specified mode.
		@endianess - Specifies how data is clocked in/out (MSB, LSB).

		Returns MPSSE_OK on success.
		Returns MPSSE_FAIL on failure.


	int Open(int vid, int pid, enum modes mode, int freq, int endianess)

		Like MPSSE(), but opens the device matching the given vendor and product ID. 
		Called internally by MPSSE().

		@vid       - Device vendor ID.
		@pid       - Device product ID.
		@mode      - MPSSE mode, one of: SPI0, SPI1, SPI2, SPI3, I2C.
		@freq      - Clock frequency to use for the specified mode.
		@endianess - SPecifies how data is clocked in/out (MSB, LSB).

		Returns MPSSE_OK on success.
		Returns MPSSE_FAIL on failure.


	void Close(void)
	 
		Closes the FTDI device and deinitializes libftdi.

		Returns void.


	char *ErrorString(void)

		Retrieves the last error string from libftdi.

		Returns a pointer to the last error string. This data should not be freed by the caller.


	int SetMode(enum modes mode, int endianess)

		Sets the appropriate transmit and receive commands based on the requested mode and byte order.
		Called internally by Open().

		@mode      - The desired mode, as listed in enum modes.
		@endianess - MPSSE_MSB or MPSSE_LSB.

		Returns MPSSE_OK on success.
		Returns MPSSE_FAIL on failure.


	void SetTimeouts(int timeout)

		Sets the read and write timeout periods for bulk usb data transfers.
		Shorter timeouts result in faster transfers, but timeouts that are too short will result in the timeout being reached before data can be read/written.
		Called internally by Open().
	
		@timeout - Timeout period in milliseconds

		Returns void.


	int SetClock(uint32_t freq)

		Sets the appropriate divisor for the desired clock frequency. Called internally by Open().

		@freq - Desired clock frequency in hertz.

		Returns MPSSE_OK on success.
		Returns MPSSE_FAIL on failure.


	uint32_t GetClock(void)

		Gets the currently configured clock frequency.

		Returns an unsigned 32 bit value representing the clock frequency.


	int SetLoopback(int enable)

		Enable / disable internal loopback.
		Called internally by SetMode().
	 
		@enable - Zero to disable the FTDI internal loopback, 1 to enable loopback.

		Returns MPSSE_OK on success.
		Returns MPSSE_FAIL on failure.


	int Start(void)

		Send the start condition for the selected protocol.

		Returns MPSSE_OK on success.
		Returns MPSSE_FAIL on failure.


	int Write(char *data, int size)

		Send data out via the selected serial protocol.
		Note that in Python the size field is not used.

		@data - Buffer of data to send.
		@size - Size of data (C only).

		Returns MPSSE_OK on success.
		Returns MPSSE_FAIL on failure.


	char *Read(int size)

		Reads data over the selected serial protocol.
	 
		@size  - Number of bytes to read.

		Returns a pointer to the read data on success.
		Returns NULL on failure.


	int Stop(void)

		Send the data stop condition for the selected serial protocol.

		Returns MPSSE_OK on success.
		Returns MPSSE_FAIL on failure.


